
Accounting - Ledger

* Low-level GL posting
** mantle.accounting.LedgerServices.calculate#AcctgTransTrialBalance (calculateAcctgTransTrialBalance)
** mantle.accounting.LedgerServices.post#AcctgTrans (postAcctgTrans)
** mantle.accounting.LedgerServices.verify#AcctgTrans (postAcctgTrans)
** mantle.accounting.LedgerServices.determine#AcctgTransGlAccounts (completeAcctgTransEntries (retries GlAccount mappings))
** mantle.accounting.LedgerServices.close#FinancialTimePeriod (closeFinancialTimePeriod)
* Journal Posting
** mantle.accounting.LedgerServices.calculate#GlJournalTrialBalance (calculateGlJournalTrialBalance)
** mantle.accounting.LedgerServices.post#GlJournal (postGlJournal)
** mantle.accounting.LedgerServices.determine#GlJournalGlAccounts (completeAcctgTransEntries)
* High-level GL posting
** Inventory
*** createAcctgTransForSalesShipmentIssuance
*** createAcctgTransForCanceledSalesShipmentIssuance
*** createAcctgTransForInventoryItemCostChange
*** createAcctgTransForInventoryItemOwnerChange
*** createAcctgTransForPhysicalInventoryVariance
*** createAcctgTransForShipmentReceipt
*** createAcctgTransForWorkEffortIssuance*
*** createAcctgTransForWorkEffortInventoryProduced*
** Misc Ops
*** createAcctgTransForWorkEffortCost
*** createAcctgTransForFixedAssetMaintIssuance
** Payment
*** createAcctgTransAndEntriesForIncomingPayment
*** createAcctgTransAndEntriesForOutgoingPayment
*** createAcctgTransAndEntriesForPaymentApplication
*** createAcctgTransAndEntriesForCustomerRefundPaymentApplication
*** revertAcctgTransOnRemovePaymentApplications
** Invoice
*** createAcctgTransForCustomerReturnInvoice
*** createAcctgTransForPurchaseInvoice
*** createAcctgTransForSalesInvoice
*** revertAcctgTransOnCancelInvoice
** Financial Account
*** postFinAccountTransToGl
* Report view-entities and/or data prep
** Income Statement (prepareIncomeStatement)
** Balance Sheet
** Profit and Loss
** Trial Balance (calculateGlAccountTrialBalance)

Billing Account

* calcBillingAccountBalance

Invoice

* mantle.accounting.InvoiceServices.create#EntireOrderInvoice (createInvoiceFromOrder, createInvoiceForOrder (based on ItemIssuance records), createInvoiceForOrderAllItems)
* mantle.accounting.InvoiceServices.create#SalesShipmentInvoices (createInvoicesFromShipment)
* mantle.accounting.InvoiceServices.create#PurchaseShipmentInvoices (createInvoicesFromShipment)
* createInvoiceFromReturn
* mantle.accounting.InvoiceServices.create#SalesReturnShipmentInvoices (createInvoicesFromReturnShipment)
* createSalesInvoicesFromDropShipment
* mantle.accounting.InvoiceServices.create#TimeEntryInvoiceItems (addTimesheetToInvoice, addWorkEffortTimeToInvoice)

Payment

* Basic Payment
** voidPayment
** createPaymentFromOrder
** createMatchingPaymentApplication
** checkPaymentInvoices
** applyPaymentToInvoice (createPaymentApplication?)
* Order Payments
** authorizeOrderPayments (authOrderPayments)
** releaseOrderPayments
** captureOrderPayments
** capturePaymentsByInvoice
** refundOrderPayment (refundPayment)
* Payment Processing
** paymentAuthorizeInterface (ccAuthInterface, paymentProcessInterface, payPalProcessInterface, eftProcessInterface)
** paymentCaptureInterface (ccCaptureInterface)
** paymentReleaseInterface (paymentReleaseInterface)
** paymentRefundInterface (paymentRefundInterface)
** paymentCreditInterface (paymentCreditInterface, ccCreditInterface)
* Payment Processing Test Services
** alwaysApprove#PaymentAuthorize (alwaysApproveCCProcessor)
** alwaysDecline#PaymentAuthorize (alwaysDeclineCCProcessor)
** alwaysFail#PaymentAuthorize (alwaysFailCCProcessor)
** alwaysBadCardNumber#PaymentAuthorize (alwaysBadCardNumberCCProcessor)
** alwaysBadExpire#PaymentAuthorize (alwaysBadExpireCCProcessor)
** alwaysNsf#PaymentAuthorize (alwaysNsfCCProcessor)
** alwaysApprove#PaymentCapture (testCCCapture, testCCCaptureWithReAuth)
** alwaysDecline#PaymentCapture (testCCProcessorCaptureAlwaysDecline)
** alwaysApprove#PaymentRelease (testCCRelease)
** alwaysApprove#PaymentRefund (testCCRefund)


Financial Account

* Transactions
** deposit#FinancialAccount (finAccountDeposit)
** withdraw#FinancialAccount (finAccountWithdraw)
** refund#FinancialAccount (finAccountRefund)
** createFinAccountTrans?
** updateFinAccountBalancesFromTrans
* updatePaymentOnFinAccTransStatusSetToCancel
* Authorization
** create#FinancialAccountAuthorization (createFinAccountAuth)
** expire#FinancialAccountAuthorization (expireFinAccountAuth)
** updateFinAccountBalancesFromAuth
* Payment Processing
** authorize#FinancialAccountPayment (ofbFaAuthorize)
** capture#FinancialAccountPayment (ofbFaCapture)
** release#FinancialAccountPayment (ofbFaRelease)
** refund#FinancialAccountPayment (ofbFaRefund)
* reconciliation? (reconcileFinAccountTrans, etc; autoFinAccountReconciliation, etc)
* gift certification services, or redundant? (ofbGcProcessor, etc; createGiftCertificate, etc)
* createPaymentAndFinAccountTrans?, expirePaymentAssociationsOnFinAccountTransCancel?
