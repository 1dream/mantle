<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="PaymentDescription">
        <in-parameters><parameter name="paymentId" required="true"/><parameter name="payment" type="org.moqui.entity.EntityValue"/></in-parameters>
        <out-parameters><parameter name="paymentDescription"/></out-parameters>
        <actions>
            <if condition="payment == null"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if>
            <set field="typeEnum" from="payment.'PaymentMethodType#moqui.basic.Enumeration'"/>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <set field="paymentDescription" from="paymentMethod?.description ? paymentMethod.description : typeEnum.description"/>
        </actions>
    </service>
    <service verb="get" noun="PaymentTotals">
        <in-parameters><parameter name="paymentId"/></in-parameters>
        <out-parameters>
            <parameter name="paymentTotal" type="BigDecimal"/>
            <parameter name="appliedTotal" type="BigDecimal"/>
            <parameter name="unappliedTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <set field="paymentTotal" from="payment.amount"/>

            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="paymentId"/>
            </entity-find>
            <set field="appliedTotal" from="0"/>
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <set field="appliedTotal" from="appliedTotal + paymentApplication.amountApplied"/>
            </iterate>

            <set field="unappliedTotal" from="paymentTotal - appliedTotal"/>
        </actions>
    </service>

    <service verb="void" noun="Payment">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="autoApply" noun="Payment">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="autoApplyTo" noun="Invoice">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters><parameter name="paymentIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <service verb="create" noun="InvoicePayment">
        <description>
            Create a Payment for an Invoice and apply it to the Invoice.

            The from/to Parties from the Invoice are reversed on the Payment.

            If the amount is greater than the unpaid Invoice total the full amount will be set on the Payment, but only
            the unpaid Invoice total will be applied to the Invoice.

            If the Invoice statusId is InvoiceInProcess/InvoiceReceived updates it to InvoiceFinalized/InvoiceApproved.

            If the amount (alone or combined with previously applied Payments) is the full invoiceTotal also updates
            the Invoice statusId to InvoicePmtRecvd.
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="statusId" default-value="PmntDelivered"/>
            <parameter name="amountUomId"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="paymentMethodTypeEnumId" default-value="PmtCompanyCheck"/>
            <parameter name="effectiveDate" type="Timestamp" default-value="${ec.user.nowTimestamp}"/>
            <parameter name="paymentRefNum"/>
            <parameter name="comments"/>
            <parameter name="paymentOverrideGlAccountId"/>
            <parameter name="applicationOverrideGlAccountId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId"/>
            <parameter name="paymentApplicationId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>

            <set field="validStatusIds" from="['InvoiceInProcess', 'InvoiceFinalized', 'InvoiceSent', 'InvoiceWriteOff', 'InvoiceReceived', 'InvoiceApproved']"/>
            <if condition="!validStatusIds.contains(invoice.statusId)">
                <entity-find-related-one value-field="invoice" relationship-name="Invoice#moqui.basic.StatusItem" to-value-field="statusEnum"/>
                <return error="true" message="Invoice is in ${statusEnum.description} status, payment not allowed."/>
            </if>

            <if condition="invoice.statusId == 'InvoiceInProcess'">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoiceFinalized']"/></if>
            <if condition="invoice.statusId == 'InvoiceReceived'">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoiceApproved']"/></if>

            <set field="initialStatusId" from="statusId == 'PmntProposed' ? statusId : 'PmntPromised'"/>

            <if condition="!amountUomId"><set field="amountUomId" from="invoice.currencyUomId"/></if>
            <service-call name="create#mantle.account.payment.Payment" out-map="context"
                    in-map="[paymentTypeEnumId:'PtInvoicePayment', fromPartyId:invoice.toPartyId,
                        toPartyId:invoice.fromPartyId, paymentMethodTypeEnumId:paymentMethodTypeEnumId,
                        statusId:initialStatusId, effectiveDate:effectiveDate, paymentRefNum:paymentRefNum,
                        amountUomId:amountUomId, amount:amount, comments:comments,
                        overrideGlAccountId:paymentOverrideGlAccountId]"/>

            <service-call name="mantle.account.PaymentServices.apply#InvoicePayment" out-map="context"
                    in-map="[paymentId:paymentId, invoiceId:invoiceId, amount:amount,
                        overrideGlAccountId:applicationOverrideGlAccountId]"/>

            <!-- now that Payment is applied, move to target status (mainly so that we go through PmntDelivered for GL posting, etc) -->

            <!-- if target status is PmntConfirmed go to PmntDelivered first -->
            <if condition="statusId == 'PmntConfirmed'">
                <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntDelivered']"/>
            </if>
            <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:statusId]"/>
        </actions>
    </service>
    <service verb="apply" noun="InvoicePayment">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="billingAccountId"/>
            <parameter name="overrideGlAccountId"/>
            <parameter name="amount" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentApplicationId" type="List"/>
            <parameter name="amountApplied" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" out-map="context"
                    in-map="[invoiceId:invoiceId]"/>
            <set field="amountApplied" from="amount > unpaidTotal ? unpaidTotal : amount"/>

            <service-call name="create#mantle.account.payment.PaymentApplication" out-map="context"
                    in-map="[paymentId:paymentId, invoiceId:invoiceId, billingAccountId:billingAccountId,
                        overrideGlAccountId:overrideGlAccountId, amountApplied:amountApplied,
                        appliedDate:ec.user.nowTimestamp]"/>

            <!-- Payment Applied, now update Invoice status -->
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" out-map="context"
                    in-map="[invoiceId:invoiceId]"/>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="unpaidTotal == 0">
                <if condition="invoice.statusId == 'InvoiceSent' || invoice.statusId == 'InvoiceFinalized'">
                    <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoicePmtRecvd']"/>
                    <else><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoicePmtSent']"/></else>
                </if>
            </if>
        </actions>
    </service>
    <service verb="apply" noun="OrderPaymentsToInvoice">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="invoiceId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="paymentApplicationIdByPaymentId" type="Map"/></out-parameters>
        <actions>
            <set field="paymentApplicationIdByPaymentId" from="[:]"/>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" out-map="invTotal"
                    in-map="[invoiceId:invoiceId]"/>
            
            <!-- try payments by part first, then payments for entire order -->
            <entity-find entity-name="mantle.account.payment.Payment" list="partPaymentList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/></entity-find>
            <entity-find entity-name="mantle.account.payment.Payment" list="orderPaymentList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId" from="null"/></entity-find>
            <set field="paymentList" from="partPaymentList + orderPaymentList"/>

            <set field="remainingAmount" from="invTotal.unpaidTotal"/>
            <iterate list="paymentList" entry="payment">
                <service-call name="mantle.account.PaymentServices.get#PaymentTotals" out-map="context"
                        in-map="[paymentId:payment.paymentId]"/>
                <if condition="unappliedTotal &gt; 0">
                    <set field="amountToApply" from="unappliedTotal > remainingAmount ? remainingAmount : unappliedTotal"/>
                    <service-call name="mantle.account.PaymentServices.apply#InvoicePayment" out-map="applyOut"
                            in-map="[paymentId:payment.paymentId, invoiceId:invoiceId, amount:amountToApply]"/>
                    <script>paymentApplicationIdByPaymentId.put(payment.paymentId, applyOut.paymentApplicationId)</script>
                    <set field="remainingAmount" from="remainingAmount - amountToApply"/>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="apply" noun="PaymentToPayment">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="toPaymentId" required="true"/>
            <parameter name="amount" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentApplicationId" type="List"/>
            <parameter name="amountApplied" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <!-- ============================= -->
    <!-- Payment Processing Interfaces -->
    <!-- ============================= -->

    <service verb="authorize" noun="Payment" type="interface">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="paymentGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
    </service>
    <service verb="capture" noun="Payment" type="interface">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="paymentGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
    </service>
    <service verb="release" noun="Payment" type="interface">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="paymentGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
    </service>
    <service verb="refund" noun="Payment" type="interface">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="paymentGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
    </service>

    <!-- ====================================== -->
    <!-- High-level Payment Processing Services -->
    <!-- ====================================== -->

    <service verb="authorize" noun="OrderPayments">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <!-- any point in this? generally want to auth whole order and then update status <parameter name="orderPartSeqId"/> -->
        </in-parameters>
        <out-parameters><parameter name="authFailed" type="Boolean"/></out-parameters>
        <actions>
            <set field="authFailed" from="false"/>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <set field="totalAuthorized" from="0"/>
            <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                <econdition field-name="orderId"/>
            </entity-find>
            <iterate list="paymentList" entry="payment">
                <service-call name="mantle.account.PaymentServices.authorize#StorePayment" out-map="authOut"
                    in-map="[paymentId:payment.paymentId, payment:payment, productStoreId:orderHeader.productStoreId]"/>
                <if condition="authOut.paymentGatewayResponse.resultSuccess == 'Y'">
                    <set field="totalAuthorized" from="totalAuthorized + authOut.paymentGatewayResponse.amount"/>

                    <else>
                        <set field="authFailed" from="true"/>
                        <service-call name="mantle.account.PaymentServices.get#PaymentDescription" in-map="context" out-map="context"/>
                        <if condition="authOut.paymentGatewayResponse.resultDeclined == 'Y'">
                            <message>${paymentDescription} was declined</message></if>
                        <if condition="authOut.paymentGatewayResponse.resultNsf == 'Y'">
                            <message>${paymentDescription} has insufficient funds</message></if>
                        <if condition="authOut.paymentGatewayResponse.resultBadExpire == 'Y'">
                            <message>${paymentDescription} has an invalid expiration date</message></if>
                        <if condition="authOut.paymentGatewayResponse.resultBadCardNumber == 'Y'">
                            <message>${paymentDescription} has an invalid card number</message></if>
                    </else>
                </if>
            </iterate>

            <if condition="totalAuthorized &gt;= orderHeader.grandTotal">
                <service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:orderId]"/></if>
        </actions>
    </service>
    <service verb="authorize" noun="StorePayment">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="paymentId" required="true"/>
            <parameter name="payment" type="org.moqui.entity.EntityValue"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
            <parameter name="paymentGatewayResponse" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <if condition="payment == null"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if>
            <entity-find-one entity-name="mantle.product.store.ProductStorePaymentGateway"
                    value-field="productStorePaymentGateway" cache="true">
                <field-map field-name="productStoreId" from="productStoreId"/>
                <field-map field-name="paymentMethodTypeEnumId" from="payment.paymentMethodTypeEnumId"/>
            </entity-find-one>
            <if condition="!productStorePaymentGateway?.paymentGatewayConfigId">
                <return error="true" message="Not authorizing Payment [${paymentId}], could not find PaymentGatewayConfig for store [${productStoreId}], type [${payment.paymentMethodTypeEnumId}]"/></if>
            <service-call name="mantle.account.PaymentServices.authorize#SinglePayment" out-map="context"
                    in-map="[paymentId:payment.paymentId, payment:payment,
                        paymentGatewayConfigId:productStorePaymentGateway.paymentGatewayConfigId]"/>
        </actions>
    </service>
    <!-- TODO: transaction="force-new" on this is blowing up, debug it -->
    <service verb="authorize" noun="SinglePayment">
        <in-parameters>
            <parameter name="paymentGatewayConfigId" required="true"/>
            <parameter name="paymentId" required="true"/>
            <parameter name="payment" type="org.moqui.entity.EntityValue"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
            <parameter name="paymentGatewayResponse" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <if condition="payment == null"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if>
            <entity-find-one entity-name="mantle.account.method.PaymentGatewayConfig"
                    value-field="paymentGatewayConfig" cache="true"/>
            <if condition="paymentGatewayConfig == null">
                <return error="true" message="Not authorizing Payment [${paymentId}], could not find PaymentGatewayConfig"/></if>

            <service-call name="${paymentGatewayConfig.authorizeServiceName}" out-map="authOut"
                    in-map="[paymentId:payment.paymentId, paymentGatewayConfigId:paymentGatewayConfig.paymentGatewayConfigId]"/>
            <set field="paymentGatewayResponseId" from="authOut.paymentGatewayResponseId"/>
            <entity-find-one entity-name="mantle.account.method.PaymentGatewayResponse" value-field="paymentGatewayResponse"/>
            <if condition="paymentGatewayResponse.resultSuccess == 'Y'">
                <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId,
                        statusId:'PmntAuthorized', paymentGatewayConfigId:paymentGatewayConfigId]"/>

                <else><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId,
                        statusId:'PmntDeclined', paymentGatewayConfigId:paymentGatewayConfigId]"/></else>
            </if>
        </actions>
    </service>
    
    <service verb="capture" noun="InvoicePayments">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters><parameter name="captureFailed" type="Boolean"/></out-parameters>
        <actions>
            <set field="captureFailed" from="false"/>
            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/></entity-find>
            <!-- capture full or partial Payment for each PaymentApplication -->
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <service-call name="mantle.account.PaymentServices.capture#SinglePayment" out-map="captOut"
                        in-map="[paymentId:paymentApplication.paymentId, amount:paymentApplication.amountApplied]"/>
            </iterate>
        </actions>
    </service>
    <!-- TODO: transaction="force-new" on this is blowing up, debug it -->
    <service verb="capture" noun="SinglePayment">
        <in-parameters>
            <parameter name="paymentId" required="true"/>
            <parameter name="payment" type="org.moqui.entity.EntityValue"/>
            <parameter name="amount" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
            <parameter name="paymentGatewayResponse" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <if condition="payment == null"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if>
            <if condition="amount == null"><set field="amount" from="payment.amount"/></if>

            <!-- lookup auth PaymentGatewayResponse and use the PaymentGatewayConfig on it -->
            <entity-find entity-name="mantle.account.method.PaymentGatewayResponse" list="authResponseList">
                <econdition field-name="paymentId"/><econdition field-name="resultSuccess" value="Y"/></entity-find>
            <if condition="authResponseList">
                <set field="paymentGatewayConfigId" from="authResponseList[0].paymentGatewayConfigId"/></if>
            <!-- if no auth PGR instead of ProductStorePaymentGateway lookup with paymentGatewayConfigId from Payment -->
            <if condition="!paymentGatewayConfigId"><set field="paymentGatewayConfigId" from="payment.paymentGatewayConfigId"/></if>

            <!-- if no auth and no payment.paymentGatewayConfigId then this shouldn't be captured (probably a payment method type with no gateway) -->
            <!-- TODO: this may need more intelligence to determine if a Payment needs to be captured, such as config by paymentMethodTypeEnumId -->
            <if condition="!paymentGatewayConfigId"><return/></if>

            <entity-find-one entity-name="mantle.account.method.PaymentGatewayConfig" value-field="paymentGatewayConfig" cache="true"/>
            <if condition="paymentGatewayConfig == null">
                <return error="true" message="Not authorizing Payment [${paymentId}], could not find PaymentGatewayConfig"/></if>

            <!-- if auth expired do an auth now -->
            <!-- TODO: determine if auth is expired (based on configured days per CC type...) -->
            <if condition="false">
                <service-call name="mantle.account.PaymentServices.authorize#SinglePayment" out-map="authOut"
                        in-map="[paymentId:payment.paymentId, payment:payment, paymentGatewayConfigId:paymentGatewayConfigId]"/>
            </if>

            <service-call name="${paymentGatewayConfig.captureServiceName}" out-map="captOut"
                    in-map="[paymentId:payment.paymentId, amount:amount, paymentGatewayConfigId:paymentGatewayConfig.paymentGatewayConfigId]"/>
            <set field="paymentGatewayResponseId" from="captOut.paymentGatewayResponseId"/>
            <entity-find-one entity-name="mantle.account.method.PaymentGatewayResponse" value-field="paymentGatewayResponse"/>
            <if condition="paymentGatewayResponse.resultSuccess == 'Y'">
                <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId, statusId:'PmntDelivered']"/>

                <else><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId, statusId:'PmntDeclined']"/></else>
            </if>
        </actions>
    </service>
</services>
