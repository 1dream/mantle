<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.2.xsd">

<!-- STATUS: EXPERIMENTAL -->

<!--
h1. General Order Services

h2. General Ecommerce Usage

| create customer | CustomerServices.create#Account |
| create/update/delete customer address | ContactServices.create#PostalAddress, .update#PartyPostalAddress |
| create/update/delete customer phone | ContactServices.create#TelecomNumber, .update#PartyTelecomNumber |
| create/update/delete customer credit card | PaymentMethodServices.create#CreditCard, .update#CreditCard |

| login: merge with previous open | merge#Orders - TODO |
| find customer open orders       | find#OpenOrders - TODO |

| init cart (auto on add to cart) | create#Order |
| add to cart                     | add#OrderProductQuantity, create#OrderItem |
| change cart quantity            | update#OrderItem |
| remove from cart                | delete#OrderItem |
| set shipping options            | TODO |
| set payment options             | TODO |
| split order                     | create#OrderPart |
| confirm/complete order          | place#Order |

| create order from shopping list | clone#Order - TODO |

-->

    <!-- Order/Part Services -->
    <service verb="create" noun="Order">
        <description>
            Create an Order (OrderHeader and one OrderPart).
            All parameters are optional so that this can be called transparently to create a shell/empty order.
        </description>
        <in-parameters>
            <parameter name="orderName"/>
            <parameter name="statusId" default-value="ORDER_OPEN"/>

            <parameter name="currencyUomId"/>
            <parameter name="billingAccountId"/>
            <parameter name="productStoreId"/>
            <parameter name="salesChannelEnumId"/>

            <parameter name="terminalId"/>
            <parameter name="externalId"/>
            <parameter name="syncStatusId"/>
            <parameter name="firstAttemptOrderId"/>

            <!-- parameters for the initial OrderPart -->
            <parameter name="vendorPartyId"/>
            <parameter name="customerPartyId"/>
            <parameter name="customerPoId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="OrderHeader" value-field="orderHeader"/>
            <entity-set value-field="orderHeader" include="nonpk"/>
            <set field="orderHeader.entryDate" from="ec.user.nowTimestamp"/>
            <set field="orderHeader.visitId" from="ec.user.visitId"/>
            <entity-sequenced-id-primary value-field="orderHeader"/>
            <entity-create value-field="orderHeader"/>

            <entity-make-value entity-name="OrderPart" value-field="orderPart"/>
            <entity-set value-field="orderHeader" include="nonpk"/>
            <set field="orderPart.orderId" from="orderHeader.orderId"/>
            <entity-sequenced-id-secondary value-field="orderPart"/>
            <entity-create value-field="orderPart"/>

            <set field="result.orderId" from="orderHeader.orderId"/>
            <set field="result.orderPartSeqId" from="orderPart.orderPartSeqId"/>
        </actions>
    </service>
    <service verb="create" noun="OrderPart">
        <in-parameters>
            <parameter name="orderId" required="true"/>

            <parameter name="vendorPartyId"/>
            <parameter name="customerPartyId"/>
            <parameter name="customerPoId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="OrderPart" value-field="orderPart"/>
            <entity-set value-field="orderHeader" include="nonpk"/>
            <set field="orderPart.orderId" from="orderHeader.orderId"/>
            <entity-sequenced-id-secondary value-field="orderPart"/>
            <entity-create value-field="orderPart"/>

            <set field="result.orderPartSeqId" from="orderPart.orderPartSeqId"/>
        </actions>
    </service>

    <!-- OrderItem Services -->
    <service verb="create" noun="OrderItem">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>

            <parameter name="itemTypeEnumId" default-value="PROD_ITEM"/>
            <parameter name="statusId" default-value="ITEM_CREATED"/>

            <parameter name="productId"/>
            <parameter name="productConfigSavedId"/>

            <parameter name="itemDescription"/>
            <parameter name="comments"/>

            <parameter name="quantity" type="BigDecimal"/>
            <parameter name="selectedAmount" type="BigDecimal"/>

            <parameter name="unitPrice" type="BigDecimal"/>
            <parameter name="unitListPrice" type="BigDecimal"/>
            <parameter name="isModifiedPrice"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="all"/>
            <entity-sequenced-id-secondary value-field="orderItem"/>
            <if condition="!itemDescription &amp;&amp; productId">
                <entity-find-one entity-name="Product" value-field="product"/>
                <set field="orderItem.itemDescription" from="product.productName"/>
            </if>
            <entity-create value-field="orderItem"/>

            <set field="result.orderItemSeqId" from="orderItem.orderItemSeqId"/>
        </actions>
    </service>
    <service verb="update" noun="OrderItem">
        <in-parameters>
            <auto-parameters include="pk" required="true"/>
            <auto-parameters include="nonpk"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="nonpk"/>
            <entity-update value-field="orderItem"/>
        </actions>
    </service>
    <service verb="delete" noun="OrderItem">
        <in-parameters>
            <auto-parameters include="pk" required="true"/>
        </in-parameters>
        <actions>
            <entity-make-value entity-name="OrderItem" value-field="orderItem"/>
            <entity-set value-field="orderItem" include="pk"/>
            <entity-delete value-field="orderItem"/>
        </actions>
    </service>
    <service verb="add" noun="OrderProductQuantity" authenticate="anonymous-all">
        <description>A simple service for an add-to-cart sort of operation, including:
            1. create an Order if no orderId is passed in
            2. determine the price to charge for the Product (and update based on quantity as needed)
            3. find a OrderItem matching the productId, and if found update quantity
            4. if no existing OrderItem is found create a new OrderItem
        </description>
        <in-parameters>
            <parameter name="orderId" required="false"/>
            <parameter name="orderPartSeqId" required="false"/>

            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default-value="1"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="!orderId">
                <set field="customerPartyId" from="ec.user.userAccount?.partyId"/>
                <service-call name="mantle.order.OrderServices.create#Order" in-map="context" out-map="createOrderOut"/>
                <set field="orderId" from="createOrderOut.orderId"/>
                <set field="orderPartSeqId" from="createOrderOut.orderPartSeqId"/>
            </if>

            <!-- find an OrderItem for the productId and increment quantity if found, otherwise create OrderItem with quantity -->
            <entity-find entity-name="OrderItem" list="orderItemList">
                <econdition-object field="[orderId:orderId, productId:productId, productConfigSavedId:null, forAssetId:null, selectedAmount:null]"/>
            </entity-find>
            <!-- TODO: calculate the price based on quantity, etc, -->
            <if condition="orderItemList">
                <set field="orderItemSeqId" from="orderItemList[0].orderItemSeqId"/>
                <set field="orderPartSeqId" from="orderItemList[0].orderPartSeqId" set-if-empty="false"/>
                <set field="quantity" from="quantity + orderItemList[0].quantity"/>
                <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="true"/>

                <else>
                    <!-- lookup orderPartSeqId if not passed in -->
                    <if condition="!orderPartSeqId">
                        <entity-find entity-name="OrderPart" list="orderPartList">
                            <econdition field-name="orderId"/>
                            <order-by field-name="orderPartSeqId"/>
                        </entity-find>
                        <if condition="orderPartList"><set field="orderPartSeqId" from="orderPartList[0].orderPartSeqId"/></if>
                    </if>

                    <service-call name="mantle.order.OrderServices.create#OrderItem" in-map="context" out-map="createOrderItemOut"/>
                    <set field="orderItemSeqId" from="createOrderItemOut.orderItemSeqId"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="OrderProductQuantity" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>

            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO: if calculatePrice=true then calculate price based on updated quantity -->
            <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="context"/>
        </actions>
    </service>

    <!-- Order Status Change Services -->
    <service verb="propose" noun="Order">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="OrderHeader" value-field="orderHeader"/>
            <set field="orderHeader.statusId" value="ORDER_PROPOSED"/>
            <entity-update value-field="orderHeader"/>
        </actions>
    </service>
    <service verb="place" noun="Order">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="OrderHeader" value-field="orderHeader"/>
            <set field="orderHeader.statusId" value="ORDER_PLACED"/>
            <entity-update value-field="orderHeader"/>
        </actions>
    </service>
    <service verb="cancel" noun="Order">
        <description>Call when customer cancels the order.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="OrderHeader" value-field="orderHeader"/>
            <set field="orderHeader.statusId" value="ORDER_CANCELLED"/>
            <entity-update value-field="orderHeader"/>
        </actions>
    </service>
</services>
