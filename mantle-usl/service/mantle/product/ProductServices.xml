<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">
    <service verb="find" noun="ProductFeatures">
        <description>Finds all product features (optionally limited by appl type) for a product and any feature groups
            associated with a category that the product is a member of. The result is a List of entity values for
            either the ProductFeatureAndAppl or ProductFeatureAndGroupAppl view entities.</description>
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="applTypeEnumId"/>
            <parameter name="productFeatureGroupIdSet" type="Set"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productFeatureList" type="List"/>
        </out-parameters>
        <actions>
            <set field="productFeatureList" from="[]"/>

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                <econdition field-name="productId"/>
                <econdition field-name="applTypeEnumId" from="applTypeEnumId" ignore-if-empty="true"/>
            </entity-find>
            <script>productFeatureList.addAll(pfaaList)</script>

            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="pcmList">
                <date-filter/><econdition field-name="productId"/></entity-find>
            <iterate list="pcmList" entry="pcm">
                <entity-find entity-name="mantle.product.feature.ProductCategoryFeatGrpAppl" list="pcfgaList">
                    <date-filter/><econdition field-name="productCategoryId" from="pcm.productCategoryId"/>
                    <econdition field-name="productFeatureGroupId" operator="in" from="productFeatureGroupIdSet" ignore-if-empty="true"/>
                    <econdition field-name="applTypeEnumId" from="applTypeEnumId" ignore-if-empty="true"/>
                </entity-find>
                <iterate list="pcfgaList" entry="pcfga">
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndGroupAppl" list="pfagaList">
                        <econdition field-name="productFeatureGroupId" from="pcfga.productFeatureGroupId"/></entity-find>
                    <script>productFeatureList.addAll(pfagaList)</script>
                </iterate>
            </iterate>
        </actions>
    </service>
    <service verb="find" noun="ProductFeatureGroups">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="applTypeEnumId" default-value="PfatSelectable"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productFeatureGroupList" type="List"/>
        </out-parameters>
        <actions>
            <set field="productFeatureGroupList" from="[]"/>

            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="pcmList">
                <date-filter/><econdition field-name="productId"/></entity-find>
            <iterate list="pcmList" entry="pcm">
                <entity-find entity-name="mantle.product.feature.ProductCategoryFeatGrpAppl" list="pcfgaList">
                    <date-filter/><econdition field-name="productCategoryId" from="pcm.productCategoryId"/>
                    <econdition field-name="productFeatureGroupId" operator="in" from="productFeatureGroupIdSet" ignore-if-empty="true"/>
                    <econdition field-name="applTypeEnumId" from="applTypeEnumId" ignore-if-empty="true"/>
                </entity-find>
                <iterate list="pcfgaList" entry="pcfga">
                    <entity-find-one entity-name="mantle.product.feature.ProductFeatureGroup" value-field="pfg" cache="true">
                        <field-map field-name="productFeatureGroupId" from="pcfga.productFeatureGroupId"/></entity-find-one>
                    <script>productFeatureGroupList.add(pfg)</script>
                </iterate>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="VariantProducts">
        <in-parameters>
            <parameter name="productId"/>
            <parameter name="productTypeEnumId"/>
            <parameter name="productFeatureGroupIdSet" type="Set"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>

            <!-- find all PfatSelectable features for the product and related categories -->
            <service-call name="mantle.product.ProductServices.find#ProductFeatures" out-map="context"
                in-map="[productId:productId, applTypeEnumId:'PfatSelectable', productFeatureGroupIdSet:productFeatureGroupIdSet]"/>

            <!-- split by feature type -->
            <set field="featuresByType" from="[:]"/>
            <iterate list="productFeatureList" entry="productFeature">
                <script>StupidUtilities.addToListInMap(productFeature.productFeatureTypeEnumId, productFeature, featuresByType)</script></iterate>
            <!-- now we want an ordered list to track the index -->
            <set field="featureListList" from="[]"/>
            <!-- add each List to List ordered by the key for consistency -->
            <set field="featureTypeTreeSet" from="new TreeSet(featuresByType.keySet())"/>
            <iterate list="featureTypeTreeSet" entry="featureType"><script>featureListList.add(featuresByType.get(featureType))</script></iterate>

            <!-- create a variant for each combination of features by type -->
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityValue
                import org.moqui.entity.EntityCondition

                ExecutionContext ec = context.ec

                def recursiveCreate(ExecutionContext ec, EntityValue product, List<List<EntityValue>> featureListList,
                                    ArrayList<EntityValue> featureList, int level) {

                    for (int i = 0; i < featureListList[level].size(); i++) {
                        featureList[level] = featureListList.get(level).get(i)
                        if (level == featureListList.size() - 1) {
                            // at the bottom, create the variant

                            String productId = product.productId
                            String productName = product.productName
                            for (EntityValue feature in featureList) {
                                EntityValue typeEnum = ec.entity.find("moqui.basic.Enumeration")
                                        .condition("enumId", feature.productFeatureTypeEnumId).useCache(true).one()
                                productId = productId + "_" + feature.productFeatureId
                                productName = productName + " " + typeEnum.description + " " + feature.description
                            }

                            // see if product exists (by ID) before creating
                            EntityValue existingProduct = ec.entity.find("mantle.product.Product")
                                    .condition("productId", productId).one()
                            if (existingProduct) continue

                            // see if variant with the same features exists
                            EntityList allVariants = ec.entity.find("mantle.product.ProductAssoc")
                                    .condition([productId: product.productId, productAssocTypeEnumId: "PatVariant"])
                                    .conditionDate(null, null, null).list()
                            Set checkProductIds = new HashSet((Collection) allVariants.toProductId)
                            for (EntityValue feature in featureList) {
                                if (!checkProductIds) break
                                EntityList remainingWithFeature = ec.entity.find("mantle.product.feature.ProductFeatureAppl")
                                        .condition("productId", EntityCondition.IN, checkProductIds)
                                        .condition("productFeatureId", feature.productFeatureId).list()
                                checkProductIds = new HashSet((Collection) remainingWithFeature.productId)
                            }
                            if (checkProductIds) continue

                            EntityValue newProduct = product.cloneValue()
                            newProduct.productName = productName; newProduct.productId = productId
                            if (productTypeEnumId) newProduct.productTypeEnumId = productTypeEnumId
                            newProduct.pseudoId = null
                            newProduct.create()

                            ec.service.sync().name("create", "mantle.product.ProductAssoc")
                                    .parameters([productId:product.productId, toProductId:newProduct.productId,
                                                 productAssocTypeEnumId:"PatVariant", fromDate:ec.user.nowTimestamp]).call()

                            for (EntityValue feature in featureList) {
                                ec.service.sync().name("create", "mantle.product.feature.ProductFeatureAppl")
                                        .parameters([productId:newProduct.productId, productFeatureId:feature.productFeatureId,
                                                     fromDate:ec.user.nowTimestamp, applTypeEnumId:"PfatDistinguishing"]).call()
                            }

                            ec.logger.info("Created variant of ${product.productId}: ${newProduct.productId}:${newProduct.productName}")
                        } else {
                            recursiveCreate(ec, product, featureListList, featureList, level + 1)
                        }
                    }
                }

                recursiveCreate(ec, product, featureListList, new ArrayList(featureListList.size()), 0)
                ]]></script>
        </actions>
    </service>
</services>
