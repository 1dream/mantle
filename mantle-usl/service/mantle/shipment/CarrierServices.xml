<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <!-- ============================= -->
    <!-- Shipping Gateway Interfaces -->
    <!-- ============================= -->

    <service verb="estimate" noun="OrderShippingRate" type="interface">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="estimate" noun="ShippingRate" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="request" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="void" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="track" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="validate" noun="ShippingPostalAddress" type="interface">
        <in-parameters>
            <parameter name="contactMechId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>

    <!-- ==================================== -->
    <!-- Order and Shipment Shipping Services -->
    <!-- ==================================== -->

    <service verb="estimate" noun="OrderShipping" transaction="cache">
        <description>Call this to estimate shipping for an order. Calls the service named in estimateOrderServiceName
            for the shipping gateway.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="shippingGatewayConfigId"><description>Optional if OrderHeader.productStoreId is populated
                and a corresponding ProductStoreShippingGateway record exists.</description></parameter>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="mantle.shipment.CarrierServices.estimate#OrderPartShipping"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="estimate" noun="OrderPartShipping">
        <description>If there are any shipping charge items (type ItemShipping) in the part deletes them. Calls the
            service specified in ShippingGatewayConfig.estimateOrderServiceName for the OrderPart.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shippingGatewayConfigId"><description>Optional if OrderHeader.productStoreId is populated
                and a corresponding ProductStoreShippingGateway record exists.</description></parameter>
        </in-parameters>
        <actions>
            <if condition="!shippingGatewayConfigId">
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

                <if condition="!orderHeader.productStoreId"><return error="true"
                        message="Could not get order shipping estimate, order is not associated with a store and no gateway config ID specified."/></if>

                <entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway"
                        value-field="productStoreShippingGateway">
                    <field-map field-name="productStoreId" from="orderHeader.productStoreId"/>
                    <field-map field-name="carrierPartyId" from="orderPart.carrierPartyId"/>
                </entity-find-one>
                <set field="shippingGatewayConfigId" from="productStoreShippingGateway?.shippingGatewayConfigId"/>
            </if>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayConfig" value-field="shippingGatewayConfig" cache="true"/>
            <if condition="shippingGatewayConfig == null"><return error="true"
                    message="Could not get order shipping estimate, no gateway configuration found."/></if>
            <if condition="!shippingGatewayConfig.estimateOrderServiceName"><return error="true"
                    message="Could not get order shipping estimate, no order estimate service on gateway configuration [${shippingGatewayConfig.shippingGatewayConfigId}]."/></if>

            <!-- if order part has shipping (ItemShipping) items clear them out first -->
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <econdition field-name="itemTypeEnumId" value="ItemShipping"/>
            </entity-delete-by-condition>

            <!-- call gateway (could be local) service to estimate shipping charges -->
            <service-call name="${shippingGatewayConfig.estimateOrderServiceName}"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
        </actions>
    </service>
    
    <service verb="estimate" noun="OrderShippingRateLocal">
        <description>Estimate shipping costs locally using rules</description>
        <implements service="mantle.shipment.CarrierServices.estimate#OrderShippingRate"/>
        <actions>
            <!-- TODO: get more data, setup as needed for a decision table -->
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <!-- NOTE: shouldn't need to exclude ItemShipping type items, calling service (estimate#OrderPartShipping) deletes them -->
                <order-by field-name="orderItemSeqId"/>
            </entity-find>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayConfig" value-field="shippingGatewayConfig" cache="true"/>

            <!-- run the OrderShippingEstimateKS knowledge session rules -->
            <script>ec.getStatelessKieSession("OrderShippingEstimateKS").execute([ec, context])</script>
        </actions>
    </service>
</services>
