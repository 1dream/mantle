<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.4.xsd">

    <!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="ShipmentDisplayInfo">
        <in-parameters><parameter name="shipmentId"/></in-parameters>
        <out-parameters>
            <parameter name="shipment" type="Map"/>
            <parameter name="statusItem" type="Map"/>
            <parameter name="fromPartyDetail" type="Map"/>
            <parameter name="toPartyDetail" type="Map"/>
            <parameter name="shipmentItemDetailList" type="List"/>
            <parameter name="shipmentRouteSegmentList" type="List"/>
            <parameter name="shipmentPackageList" type="List"/>
            <parameter name="shipmentItemSourceList" type="List"/>
            <parameter name="orderIdSet" type="Set"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="statusItem" from="shipment.'Shipment#moqui.basic.StatusItem'"/>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromPartyDetail">
                <field-map field-name="partyId" from="shipment.fromPartyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toPartyDetail">
                <field-map field-name="partyId" from="shipment.toPartyId"/></entity-find-one>

            <entity-find entity-name="mantle.shipment.ShipmentItemDetail" list="shipmentItemDetailList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentItemSeqId"/></entity-find>
            <entity-find entity-name="mantle.shipment.ShipmentRouteSegmentDetail" list="shipmentRouteSegmentList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
            <entity-find-related value-field="shipment" relationship-name="mantle.shipment.ShipmentPackage"
                    list="shipmentPackageList" order-by-list="['shipmentPackageSeqId']"/>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="shipmentId"/></entity-find>
            <set field="orderIdSet" from="new TreeSet()"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <script>if (shipmentItemSource.orderId) orderIdSet.add(shipmentItemSource.orderId)</script></iterate>
        </actions>
    </service>

    <service verb="create" noun="Shipment">
        <in-parameters>
            <auto-parameters entity-name="mantle.shipment.Shipment"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentRouteSegment"/>
            <parameter name="statusId" default-value="ShipInput"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
        </out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.Shipment" in-map="context" out-map="context"/>
            <service-call name="create#mantle.shipment.ShipmentRouteSegment" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="ShipmentAndRouteSegment">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <auto-parameters entity-name="mantle.shipment.Shipment" include="nonpk"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentRouteSegment" include="nonpk"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" in-map="context" out-map="context"/>
            <if condition="!shipmentRouteSegmentSeqId">
                <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList">
                    <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
                <set field="shipmentRouteSegmentSeqId" from="srsList?.get(0).shipmentRouteSegmentSeqId"/>
            </if>
            <if condition="shipmentRouteSegmentSeqId">
                <service-call name="update#mantle.shipment.ShipmentRouteSegment" in-map="context" out-map="context"/>
            </if>
        </actions>
    </service>
    <service verb="create" noun="ShipmentItem">
        <description>Create a ShipmentItem and a single ShipmentItemSource with quantityNotHandled defaulting to the full quantity.</description>
        <in-parameters>
            <auto-parameters entity-name="mantle.shipment.ShipmentItem" required="true"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentItemSource"/>
            <parameter name="statusId" default="SisPending"/>
        </in-parameters>
        <out-parameters><parameter name="shipmentItemSourceId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.ShipmentItem" in-map="context" out-map="context"/>
            <set field="quantityNotHandled" from="quantityNotHandled != null ? quantityNotHandled : quantity"/>
            <service-call name="create#mantle.shipment.ShipmentItemSource" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="ensure" noun="ShipmentItemQuantityRemaining">
        <in-parameters>
            <parameter name="shipmentId" required="true"/><parameter name="productId" required="true"/>
            <parameter name="newQuantityRemaining" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem"/>
            <if condition="shipmentItem">
                <entity-find-one entity-name="mantle.shipment.ShipmentItemDetail" value-field="shipmentItemDetail">
                    <field-map field-name="shipmentId"/><field-map field-name="productId"/>
                </entity-find-one>
                <set field="quantityRemaining" from="shipmentItem.quantity - (shipmentItemDetail.quantityAcceptedTotal ?: 0) - (shipmentItemDetail.quantityRejectedTotal ?: 0)"/>
                <if condition="quantityRemaining &lt; newQuantityRemaining">
                    <set field="incrementQuantity" from="newQuantityRemaining - quantityRemaining"/>
                    <set field="shipmentItem.quantity" from="shipmentItem.quantity + incrementQuantity"/>
                    <entity-update value-field="shipmentItem"/>
                    <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList"/>
                    <if condition="sisList">
                        <set field="sis" from="sisList.first"/>
                        <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) + incrementQuantity"/>
                        <entity-update value-field="sis"/>

                        <else>
                            <service-call name="create#mantle.shipment.ShipmentItemSource"
                                    in-map="[quantityNotHandled:incrementQuantity, statusId:'SisPending'] + shipmentItem"/>
                        </else>
                    </if>
                </if>

                <else>
                    <!-- no ShipmentItem at all, create one -->
                    <service-call name="mantle.shipment.ShipmentServices.create#ShipmentItem"
                            in-map="[shipmentId:shipmentId, productId:productId, quantity:newQuantityRemaining]"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="ship" noun="OrderPart">
        <!-- TODO: removed transaction="cache" because of issue related to create of ShipmentItemSource, then
            InventoryItem, then update of SIS to refer to it, causes FK issue as SIS gets created first; TX cache
            needs improvement to handle this (see TODO comment in TransactionCache.update() method) -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.shipment.ShipmentServices.create#OrderPartShipment" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId]"/>

            <!-- pack all items (creating ShipmentPackageContent and AssetIssuance records) -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <if condition="orderItem.productId">
                    <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentProduct"
                            in-map="[productId:orderItem.productId, quantity:orderItem.quantity, shipmentId:shipmentId,
                                shipmentPackageSeqId:shipmentPackageSeqId]"/>
                </if>
            </iterate>

            <!-- set Shipment Packed -->
            <service-call name="mantle.shipment.ShipmentServices.pack#Shipment" in-map="[shipmentId:shipmentId]"/>

            <!-- on Shipment Packed mark Order as Completed (IF all order part items are completed) -->
            <service-call name="mantle.order.OrderServices.checkComplete#OrderPart"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId]"/>

            <!-- set Shipment Shipped -->
            <service-call name="mantle.shipment.ShipmentServices.ship#Shipment" in-map="[shipmentId:shipmentId]"/>
        </actions>
    </service>

    <service verb="create" noun="OrderPartShipment">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="createPackage" type="Boolean" default="true"/>
            <parameter name="createRouteSegment" type="Boolean" default="true"/>
            <parameter name="originFacilityId"/>
            <parameter name="destinationFacilityId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <!-- is this an outgoing Shipment (use ShpTpSales) or incoming (use ShpTpPurchase) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="orderPart.customerPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchase' : 'ShpTpSales'"/>

            <if condition="orderPart.facilityId">
                <if condition="customerOrgInternal">
                    <set field="destinationFacilityId" from="destinationFacilityId ?: orderPart.facilityId"/>
                    <else><set field="originFacilityId" from="originFacilityId ?: orderPart.facilityId"/></else>
                </if>
            </if>

            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput',
                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId]"/>

            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>
            <if condition="createRouteSegment">
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context"
                        in-map="[shipmentId:shipmentId, carrierPartyId:carrierPartyId,
                            shipmentMethodEnumId:shipmentMethodEnumId,
                            destPostalContactMechId:orderPart.postalContactMechId,
                            destTelecomContactMechId:orderPart.telecomContactMechId,
                            originFacilityId:originFacilityId, destinationFacilityId:destinationFacilityId]"/>
            </if>
            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>

            <!-- for each OrderItem in the part create ShipmentItem and ShipmentItemSource records -->
            <entity-find-related value-field="orderPart" relationship-name="mantle.order.OrderItem" list="orderItemList"
                    order-by-list="['orderItemSeqId']"/>
            <iterate list="orderItemList" entry="orderItem">
                <if condition="orderItem.productId">
                    <!-- see if Product is a physical item -->
                    <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                        <field-map field-name="productId" from="orderItem.productId"/></entity-find-one>
                    <set field="productTypeEnum" from="product.'ProductType#moqui.basic.Enumeration'"/>

                    <if condition="productTypeEnum.parentEnumId == 'PtPhysical'">
                        <service-call name="create#mantle.shipment.ShipmentItem"
                                in-map="[shipmentId:shipmentId, productId:orderItem.productId, quantity:orderItem.quantity]"/>
                        <service-call name="create#mantle.shipment.ShipmentItemSource"
                                in-map="[shipmentId:shipmentId, productId:orderItem.productId, statusId:'SisPending',
                                quantity:orderItem.quantity, quantityNotHandled:orderItem.quantity,
                                orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>

                        <!-- for mantle.order.OrderItemBilling set the invoiceId/invoiceItemSeqId on it -->
                        <set field="quantityNotBilled" from="orderItem.quantity"/>
                        <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                            <econdition field-name="orderId"/><econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                        </entity-find>
                        <iterate list="orderItemBillingList" entry="orderItemBilling">
                            <if condition="!orderItemBilling.shipmentId &amp;&amp; quantityNotBilled >= orderItemBilling.quantity">
                                <set field="orderItemBilling.shipmentId" from="shipmentId"/>
                                <entity-update value-field="orderItemBilling"/>
                                <set field="quantityNotBilled" from="quantityNotBilled - orderItemBilling.quantity"/>
                            </if>
                        </iterate>
                        <!-- if quantityNotBilled > 0 do anything here? we don't have another Invoice/Item with quantity to match... -->
                    </if>
                </if>
            </iterate>

        </actions>
    </service>

    <service verb="pack" noun="ShipmentProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/>
            <entity-find-related-one value-field="product" relationship-name="ProductType#moqui.basic.Enumeration"
                    to-value-field="productTypeEnum" cache="true"/>
            <if condition="productTypeEnum.parentEnumId != 'PtPhysical' &amp;&amp; productTypeEnum.enumId != 'PtPhysical'">
                <log level="info" message="Not packing Product [${productId}], type [${productTypeEnum.enumId} is not a physical product.]"/>
                <return/>
            </if>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" cache="false">
                <econdition field-name="shipmentId"/><econdition field-name="productId"/>
                <econdition field-name="quantityNotHandled" operator="greater" from="0"/>
            </entity-find>
            <set field="quantityRemaining" from="quantity"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="quantityToPack" from="shipmentItemSource.quantityNotHandled > quantityRemaining ?
                        quantityRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityRemaining" from="quantityRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource"
                        in-map="[shipmentItemSource:shipmentItemSource, shipmentPackageSeqId:shipmentPackageSeqId,
                            quantity:quantityToPack]"/>
            </iterate>
        </actions>
    </service>
    <service verb="pack" noun="ShipmentItemSource">
        <description>This is the lowest-level packing service and operates on a single ShipmentItemSource record.</description>
        <in-parameters>
            <parameter name="shipmentItemSource" type="org.moqui.entity.EntityValue" required="true"/>
            <parameter name="shipmentPackageSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <!-- create ShipmentPackageContent or update if already exists -->
            <entity-find-one entity-name="mantle.shipment.ShipmentPackageContent" value-field="shipmentPackageContent">
                <field-map field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                <field-map field-name="productId" from="shipmentItemSource.productId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="shipmentPackageContent">
                <set field="shipmentPackageContent.quantity" from="shipmentPackageContent.quantity + quantity"/>
                <entity-update value-field="shipmentPackageContent"/>

                <else>
                    <service-call name="create#mantle.shipment.ShipmentPackageContent"
                            in-map="[shipmentId:shipmentItemSource.shipmentId, productId:shipmentItemSource.productId,
                                shipmentPackageSeqId:shipmentPackageSeqId, quantity:quantity]"/>
                </else>
            </if>

            <!-- create AssetIssuance records based on AssetReservation records -->
            <entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetReservationList">
                <econdition field-name="orderId" from="shipmentItemSource.orderId"/>
                <econdition field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                <econdition field-name="quantityNotIssued" operator="greater" from="0"/>
            </entity-find>
            <if condition="assetReservationList">
                <!-- issue based on reservations -->
                <set field="quantityRemaining" from="quantity"/>
                <iterate list="assetReservationList" entry="assetReservation">
                    <set field="quantityToIssue" from="assetReservation.quantityNotIssued > quantityRemaining ?
                        quantityRemaining : assetReservation.quantityNotIssued"/>
                    <set field="quantityRemaining" from="quantityRemaining > assetReservation.quantityNotIssued ?
                        (quantityRemaining - assetReservation.quantityNotIssued) : 0"/>
                    <service-call name="mantle.product.AssetServices.issue#AssetReservation"
                            in-map="[assetReservation:assetReservation, shipmentId:shipmentItemSource.shipmentId,
                                quantity:quantityToIssue]"/>
                </iterate>

                <else>
                    <!-- do a non-reservation asset issuance -->
                    <service-call name="mantle.product.AssetServices.issue#Asset"
                            in-map="[shipmentId:shipmentItemSource.shipmentId, quantity:quantity,
                                orderId:shipmentItemSource.orderId, orderItemSeqId:shipmentItemSource.orderItemSeqId]"/>
                </else>
            </if>

            <!-- update quantityNotHandled to get ready for the next pack call -->
            <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantity"/>
            <if condition="shipmentItemSource.quantityNotHandled &lt;= 0">
                <set field="shipmentItemSource.statusId" value="SisPacked"/>
            </if>
            <entity-update value-field="shipmentItemSource"/>
        </actions>
    </service>

    <service verb="receive" noun="EntireShipment" transaction="cache">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="facilityId"><description>If not specified uses ShipmentRouteSegment.destinationFacilityId.</description></parameter>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.shipment.ShipmentItem" list="shipmentItemList">
                <econdition field-name="shipmentId"/></entity-find>
            <iterate list="shipmentItemList" entry="shipmentItem">
                <service-call name="mantle.shipment.ShipmentServices.receive#ShipmentProduct"
                        in-map="[shipmentId:shipmentId, productId:shipmentItem.productId,
                            quantityAccepted:shipmentItem.quantity, facilityId:facilityId]"/>
            </iterate>

            <!-- consider doing this automatically when all quantities of all items are received -->
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipDelivered']"/>
        </actions>
    </service>
    <service verb="receive" noun="ShipmentProduct">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="facilityId"><description>If not specified uses ShipmentRouteSegment.destinationFacilityId.</description></parameter>
            <parameter name="quantityAccepted" type="BigDecimal" required="true"/>
            <parameter name="quantityRejected" type="BigDecimal" default-value="0"/>
            <parameter name="rejectionReasonEnumId"/>

            <auto-parameters entity-name="mantle.product.asset.Asset" include="nonpk"/>
            <!--
            <parameter name="assetTypeEnumId"/>
            <parameter name="classEnumId"/>
            <parameter name="statusId"/>
            <parameter name="assetName"/>
            <parameter name="serialNumber"/>
            -->
        </in-parameters>
        <out-parameters>
            <parameter name="assetIdList" type="List"/>
        </out-parameters>
        <actions>
            <if condition="!facilityId">
                <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegmentList">
                    <econdition field-name="shipmentId"/><order-by field-name="-shipmentRouteSegmentSeqId"/></entity-find>
                <set field="facilityId" from="shipmentRouteSegmentList?.first?.destinationFacilityId"/>
            </if>
            <if condition="!facilityId"><return error="true" message="Cannot receive Product ${productId} on Shipment ${shipmentId}, no facilityId specified."/></if>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" cache="false">
                <econdition field-name="shipmentId"/><econdition field-name="productId"/>
                <econdition field-name="quantityNotHandled" operator="greater" from="0"/>
            </entity-find>
            <set field="assetIdList" from="[]"/>
            <set field="quantityAcceptedRemaining" from="quantityAccepted"/>
            <set field="quantityRejectedRemaining" from="quantityRejected"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="quantityToAccept" from="shipmentItemSource.quantityNotHandled > quantityAcceptedRemaining ?
                        quantityAcceptedRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityAcceptedRemaining" from="quantityAcceptedRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityAcceptedRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantityToAccept"/>

                <set field="quantityToReject" from="shipmentItemSource.quantityNotHandled > quantityRejectedRemaining ?
                        quantityRejectedRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityRejectedRemaining" from="quantityRejectedRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityRejectedRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantityToReject"/>

                <service-call name="mantle.product.AssetServices.receive#Asset" out-map="receiveAssetOut"
                        in-map="context + [productId:productId, quantity:quantityToAccept, shipmentId:shipmentId,
                            shipmentPackageSeqId:null, orderId:shipmentItemSource.orderId,
                            orderItemSeqId:shipmentItemSource.orderItemSeqId, facilityId:facilityId,
                            quantityRejected:quantityToReject, rejectionReasonEnumId:rejectionReasonEnumId]"/>
                <script>assetIdList.add(receiveAssetOut.assetId)</script>

                <!-- update quantityNotHandled and status -->
                <if condition="shipmentItemSource.quantityNotHandled &lt;= 0">
                    <set field="shipmentItemSource.statusId" value="SisReceived"/>
                </if>
                <entity-update value-field="shipmentItemSource"/>
            </iterate>

            <if condition="quantityAcceptedRemaining > 0 || quantityRejectedRemaining > 0">
                <message>Not sufficient quantity to receive ${quantityAcceptedRemaining} of ${quantityAccepted} accepted or ${quantityRejectedRemaining} of ${quantityRejected} rejected.</message>
            </if>
        </actions>
    </service>

    <service verb="pack" noun="Shipment">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipPacked']"/>
        </actions>
    </service>
    <service verb="ship" noun="Shipment">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipShipped']"/>
        </actions>
    </service>
</services>
